export default class phaserControls{constructor(scene){this.scene=scene,this.schemes=[],this.keys=null}createCursorKeys(active,add){return void 0!==this.cursorKeys?console.log("Cursor Keys already created!"):(null==active&&(active=!1),null==add&&(add=!0),this.cursorKeys={name:"cursorKeysDefault",controls:{up:"UP",down:"DOWN",left:"LEFT",right:"RIGHT",shift:"SHIFT",space:"SPACE"},active:active},add&&(this.add(this.cursorKeys),active&&this.setActive("cursorKeysDefault")),this.cursorKeys)}createWasdKeys(active,add){return void 0!==this.wasdKeys?console.log("WASD Keys already created!"):(null==active&&(active=!1),null==add&&(add=!0),this.wasdKeys={name:"wasdKeysDefault",controls:{up:"W",down:"S",left:"A",right:"D",shift:"SHIFT",space:"SPACE"},active:active},add&&(this.add(this.wasdKeys),active&&this.setActive("wasdKeysDefault")),this.wasdKeys)}add(config){this.schemes.push(config),config.active&&this.setActive(config)}addMultiple(array){array.length>0&&array.forEach(function(config,index){this.schemes.push(config),config.active&&this.setActive(config)})}get(name,active){if(null==name)return this.getActive();null==active&&(active=!1);let getScheme=this.schemes.find(function(s){return s.name===name});return active&&this.setActive(getScheme),getScheme}getActive(name){null==name&&(name=!1);let findScheme=this.schemes.find(function(s){return!0===s.active});return name?findScheme.name:findScheme}getAll(){return this.schemes}switch(oldScheme,newScheme){if(null==newScheme)return console.error('phaserControls.switch : Parameter "newScheme" is undefined');this.setActive(newScheme)}setActive(scheme){const scene=this.scene;let getNewScheme;this.schemes.forEach(function(s){s.active&&(s.active=!1),scheme!==s.name&&scheme!==s||(s.active=!0,getNewScheme=s)}),this.keys=scene.input.keyboard.addKeys(getNewScheme.controls),this.keys.name=getNewScheme.name}edit(scheme,config){this.schemes.forEach(function(s,index){s.name!==scheme&&s!==scheme||(this.schemes[index]=config)},this)}delete(scheme,destroy){const scene=this.scene;let schemesArray=this.schemes,nextScheme=!1,currentControls=Object.keys(this.keys);schemesArray.forEach(function(s,index){s.name!==scheme&&s!==scheme||(s.active&&(nextScheme=!0),destroy&&currentControls.forEach(function(key){scene.input.keyboard.removeCapture(this.keys[key].keyCode),scene.input.keyboard.removeKey(this.keys[key])},this),schemesArray.splice(index,1))},this),nextScheme&&this.setActive(schemesArray[0])}debugText(x,y,fontsize,color){const scene=this.scene;let i=0,scheme=this.getActive();this.controlsText=scene.add.text(x,y,"Click text to change the control scheme. \n \n"+JSON.stringify(scheme,void 0,2),{fontFamily:"Verdana",fontSize:fontsize,color:color}).setOrigin(.5,.5),this.controlsText.setInteractive(new Phaser.Geom.Rectangle(0,0,this.controlsText.width,this.controlsText.height),Phaser.Geom.Rectangle.Contains),this.controlsText.on("pointerdown",function(pointer){i<this.schemes.length-1?i++:i=0,scheme=this.schemes[i],this.setActive(this.schemes[i].name),this.controlsText.setText("Click text to change the control scheme. \n \n"+JSON.stringify(scheme,void 0,2))},this)}}